% Cleaned by https://flamingtempura.github.io/bibtex-tidy
% Run `pandoc citations.bib -t csljson -o citations.json`
@article{LohstrohEtAl:24:DeterministicCoordination,
   author = {Lohstroh, Marten and Bateni, Soroush and Menard, Christian and Schulz-Rosengarten, Alexander and Castrillon, Jeronimo},
   title = {Deterministic Coordination across Multiple Timelines},
   journal = {ACM Transactions on Embedded Computing Systems},
   volume = {23},
   number = {5},
   pages = {1-29},
   DOI = {10.1145/3615357},
   year = {2024},
   type = {Journal Article}
}

@article{lin2023towards,
	title        = {Towards Building Verifiable CPS Using Lingua Franca},
	author       = {Lin, Shaokai and Manerkar, Yatin A. and Lohstroh, Marten and Polgreen, Elizabeth and Yu, Sheng-Jung and Jerad, Chadlia and Lee, Edward A. and Seshia, Sanjit A.},
	year         = 2023,
	month        = {sep},
	journal      = {ACM Trans. Embed. Comput. Syst.},
	publisher    = {Association for Computing Machinery},
	address      = {New York, NY, USA},
	volume       = 22,
	number       = {5s},
	doi          = {10.1145/3609134},
	issn         = {1539-9087},
	url          = {https://doi.org/10.1145/3609134},
	note         = {VER'23},
	issue_date   = {October 2023},
	abstract     = {Formal verification of cyber-physical systems (CPS) is challenging because it has to consider real-time and concurrency aspects that are often absent in ordinary software. Moreover, the software in CPS is often complex and low-level, making it hard to assure that a formal model of the system used for verification is a faithful representation of the actual implementation, which can undermine the value of a verification result. To address this problem, we propose a methodology for building verifiable CPS based on the principle that a formal model of the software can be derived automatically from its implementation. Our approach requires that the system implementation is specified in Lingua Franca (LF), a polyglot coordination language tailored for real-time, concurrent CPS, which we made amenable to the specification of safety properties via annotations in the code. The program structure and the deterministic semantics of LF enable automatic construction of formal axiomatic models directly from LF programs. The generated models are automatically checked using Bounded Model Checking (BMC) by the verification engine Uclid5 using the Z3 SMT solver. The proposed technique enables checking a well-defined fragment of Safety Metric Temporal Logic (Safety MTL) formulas. To ensure the completeness of BMC, we present a method to derive an upper bound on the completeness threshold of an axiomatic model based on the semantics of LF. We implement our approach in the LF Verifier and evaluate it using a benchmark suite with 22 programs sampled from real-life applications and benchmarks for Erlang, Lustre, actor-oriented languages, and RTOSes. The LF Verifier correctly checks 21 out of 22 programs automatically.},
	articleno    = 155,
	numpages     = 24,
	keywords     = {concurrency, automated verification, safety MTL, model-based design, Cyber-physical systems, axiomatic modeling}
}
@article{lee2023consistency1,
	title        = {Consistency vs. Availability in Distributed Cyber-Physical Systems},
	author       = {Lee, Edward A. and Akella, Ravi and Bateni, Soroush and Lin, Shaokai and Lohstroh, Marten and Menard, Christian},
	year         = 2023,
	month        = {sep},
	journal      = {ACM Trans. Embed. Comput. Syst.},
	publisher    = {Association for Computing Machinery},
	address      = {New York, NY, USA},
	volume       = 22,
	number       = {5s},
	doi          = {10.1145/3609119},
	issn         = {1539-9087},
	url          = {https://doi.org/10.1145/3609119},
	note         = {CALCPS'23},
	issue_date   = {October 2023},
	abstract     = {In distributed applications, Brewer’s CAP theorem tells us that when networks become partitioned (P), one must give up either consistency (C) or availability (A). Consistency is agreement on the values of shared variables; availability is the ability to respond to reads and writes accessing those shared variables. Availability is a real-time property whereas consistency is a logical property. We extend consistency and availability to refer to cyber-physical properties such as the state of the physical system and delays in actuation. We have further extended the CAP theorem to relate quantitative measures of these two properties to quantitative measures of communication and computation latency (L), obtaining a relation called the CAL theorem that is linear in a max-plus algebra. This paper shows how to use the CAL theorem in various ways to help design cyber-physical systems. We develop a methodology for systematically trading off availability and consistency in application-specific ways and to guide the system designer when putting functionality in end devices, in edge computers, or in the cloud. We build on the Lingua Franca coordination language to provide system designers with concrete analysis and design tools to make the required tradeoffs in deployable embedded software.},
	articleno    = 138,
	numpages     = 24,
	keywords     = {concurrency, availability, Coordination, consistency}
}
@article{menard2023high1,
	title        = {High-Performance Deterministic Concurrency Using Lingua Franca},
	author       = {Menard, Christian and Lohstroh, Marten and Bateni, Soroush and Chorlian, Matthew and Deng, Arthur and Donovan, Peter and Fournier, Cl\'{e}ment and Lin, Shaokai and Suchert, Felix and Tanneberger, Tassilo and Kim, Hokeun and Castrillon, Jeronimo and Lee, Edward A.},
	year         = 2023,
	month        = {oct},
	journal      = {ACM Trans. Archit. Code Optim.},
	publisher    = {Association for Computing Machinery},
	address      = {New York, NY, USA},
	volume       = 20,
	number       = 4,
	doi          = {10.1145/3617687},
	issn         = {1544-3566},
	url          = {https://doi.org/10.1145/3617687},
	note         = {TACO'23},
	issue_date   = {December 2023},
	abstract     = {Actor frameworks and similar reactive programming techniques are widely used for building concurrent systems. They promise to be efficient and scale well to a large number of cores or nodes in a distributed system. However, they also expose programmers to nondeterminism, which often makes implementations hard to understand, debug, and test. The recently proposed reactor model is a promising alternative that enables deterministic concurrency. In this article, we present an efficient, parallel implementation of reactors and demonstrate that the determinacy of reactors does not imply a loss in performance. To show this, we evaluate Lingua Franca (LF), a reactor-oriented coordination language. LF equips mainstream programming languages with a deterministic concurrency model that automatically takes advantage of opportunities to exploit parallelism. Our implementation of the Savina benchmark suite demonstrates that, in terms of execution time, the runtime performance of LF programs even exceeds popular and highly optimized actor frameworks. We compare against Akka and CAF, which LF outperforms by 1.86\texttimes{} and 1.42\texttimes{}, respectively.},
	articleno    = 48,
	numpages     = 29,
	keywords     = {determinism, Coordination, performance, concurrency}
}
@inproceedings{lee2023generalizing,
	title        = {Generalizing Logical Execution Time},
	author       = {Edward A. Lee and Marten Lohstroh},
	year         = 2023,
	month        = {July},
	booktitle    = {Principles of Systems Design},
	volume       = {Lncs 13660},
	doi          = {10.1007/978-3-031-22337-2_8},
	url          = {https://www.icyphy.org/publications/2023_LeeLohstroh/},
	note         = {LET'23},
	abstract     = {In the Logical Execution Time (LET) principle, concurrent software components interact deterministically, reading their inputs atomically at the start of a task and producing outputs atomically after a fixed elapsed logical time. In addition to deterministic concurrency, LET programs yield more deterministic timing when they interact with their physical environment through sensors and actuators. This paper shows through a series of examples that the LET principle can be realized flexibly and generalized using the Lingua Franca coordination language.}
}
@article{lee2023trading,
	title        = {Trading Off Consistency and Availability in Tiered Heterogeneous Distributed Systems},
	author       = {Edward A. Lee  and Soroush Bateni  and Shaokai Lin  and Marten Lohstroh  and Christian Menard},
	year         = 2023,
	journal      = {Intelligent Computing},
	volume       = 2,
	pages        = {0013},
	doi          = {10.34133/icomputing.0013},
	url          = {https://spj.science.org/doi/abs/10.34133/icomputing.0013},
	note         = {CAL_IC'23},
	eprint       = {https://spj.science.org/doi/pdf/10.34133/icomputing.0013},
	abstract     = {Tiered distributed computing systems, where components run in Internet-of-things devices, in edge computers, and in the cloud, introduce unique difficulties in maintaining consistency of shared data while ensuring availability. A major source of difficulty is the highly variable network latencies that applications must deal with. It is well known in distributed computing that when network latencies rise sufficiently, one or both of consistency and availability must be sacrificed. This paper quantifies consistency and availability and gives an algebraic relationship between these quantities and network latencies. The algebraic relation is linear in a max-plus algebra and supports heterogeneous networks, where the communication latency between 2 components may differ from the latency between another 2 components. We show how to make use of this algebraic relation to guide design, enabling software designers to specify consistency and availability requirements, and to derive from those the requirements on network latencies. We show how to design systems to fail in predictable ways when the network latency requirements are violated, by choosing to sacrifice either consistency or availability.}
}
@misc{schulz_rosengarten2023modal,
	title        = {Modal Reactors},
	author       = {Alexander Schulz-Rosengarten and Reinhard von Hanxleden and Marten Lohstroh and Soroush Bateni and Edward A. Lee},
	year         = 2023,
	doi          = {10.48550/arXiv.2301.09597},
	url          = {https://arxiv.org/abs/2301.09597},
	note         = {Modes'23},
	eprint       = {2301.09597},
	archiveprefix = {arXiv},
	primaryclass = {cs.PL}
}
@misc{lee2023consistency2,
	title        = {Consistency vs. Availability in Distributed Real-Time Systems},
	author       = {Edward A. Lee and Ravi Akella and Soroush Bateni and Shaokai Lin and Marten Lohstroh and Christian Menard},
	year         = 2023,
	doi          = {https://doi.org/10.48550/arXiv.2301.08906},
	url          = {https://arxiv.org/abs/2301.08906},
	note         = {CAL'23},
	eprint       = {2301.08906},
	archiveprefix = {arXiv},
	primaryclass = {cs.DC}
}
@inproceedings{jellum2023threaded,
	title        = {{Beyond the Threaded Programming Model on Real-Time Operating Systems}},
	author       = {Jellum, Erling Rennemo and Lin, Shaokai and Donovan, Peter and Soyer, Efsane and Shakir, Fuzail and Bryne, Torleiv and Orlandic, Milica and Lohstroh, Marten and Lee, Edward A.},
	year         = 2023,
	booktitle    = {Fourth Workshop on Next Generation Real-Time Embedded Systems (NG-RES 2023)},
	publisher    = {Schloss Dagstuhl -- Leibniz-Zentrum f{\"u}r Informatik},
	address      = {Dagstuhl, Germany},
	series       = {Open Access Series in Informatics (OASIcs)},
	volume       = 108,
	pages        = {3:1--3:13},
	doi          = {10.4230/OASIcs.NG-RES.2023.3},
	isbn         = {978-3-95977-268-6},
	issn         = {2190-6807},
	url          = {https://drops.dagstuhl.de/entities/document/10.4230/OASIcs.NG-RES.2023.3},
	note         = {NG-RES'23},
	editor       = {Terraneo, Federico and Cattaneo, Daniele},
	urn          = {urn:nbn:de:0030-drops-177348},
	annote       = {Keywords: Real time, concurrency, reactors, Lingua Franca, RTOS}
}
@misc{menard2023high2,
	title        = {High-Performance Deterministic Concurrency using Lingua Franca},
	author       = {Christian Menard and Marten Lohstroh and Soroush Bateni and Matthew Chorlian and Arthur Deng and Peter Donovan and Clément Fournier and Shaokai Lin and Felix Suchert and Tassilo Tanneberger and Hokeun Kim and Jeronimo Castrillon and Edward A. Lee},
	year         = 2023,
	note         = {Perf'23},
	eprint       = {2301.02444},
	archiveprefix = {arXiv},
	primaryclass = {cs.PL}
}
@misc{bateni2022xronos,
	title        = {Xronos: Predictable Coordination for Safety-Critical Distributed Embedded Systems},
	author       = {Soroush Bateni and Marten Lohstroh and Hou Seng Wong and Rohan Tabish and Hokeun Kim and Shaokai Lin and Christian Menard and Cong Liu and Edward A. Lee},
	year         = 2022,
	note         = {Xronos'22},
	eprint       = {2207.09555},
	archiveprefix = {arXiv},
	primaryclass = {cs.DC}
}
@inproceedings{lee2021time,
	title        = {Time for All Programs, Not Just Real-Time Programs},
	author       = {Lee, Edward A. and Lohstroh, Marten},
	year         = 2021,
	booktitle    = {Leveraging Applications of Formal Methods, Verification and Validation},
	publisher    = {Springer International Publishing},
	address      = {Cham},
	pages        = {213--232},
	doi          = {10.1007/978-3-030-89159-6_15},
	isbn         = {978-3-030-89159-6},
	note         = {ISoLA'21},
	editor       = {Margaria, Tiziana and Steffen, Bernhard},
	abstract     = {We argue that the utility of time as a semantic property of software is not limited to the domain of real-time systems. This paper outlines four concurrent design patterns: alignment, precedence, simultaneity, and consistency, all of which are relevant to general-purpose software applications. We show that a semantics of logical time provides a natural framework for reasoning about concurrency, makes some difficult problems easy, and offers a quantified interpretation of the CAP theorem, enabling quantified evaluation of the tradeoff between consistency and availability.}
}
@misc{lee2021quantifying,
	title        = {Quantifying and Generalizing the CAP Theorem},
	author       = {Edward A. Lee and Soroush Bateni and Shaokai Lin and Marten Lohstroh and Christian Menard},
	year         = 2021,
	note         = {CAL'21},
	eprint       = {2109.07771},
	archiveprefix = {arXiv},
	primaryclass = {cs.DC}
}
@article{lohstroh2021lingua,
	title        = {Toward a Lingua Franca for Deterministic Concurrent Systems},
	author       = {Lohstroh, Marten and Menard, Christian and Bateni, Soroush and Lee, Edward A.},
	year         = 2021,
	month        = {may},
	journal      = {ACM Trans. Embed. Comput. Syst.},
	publisher    = {Association for Computing Machinery},
	address      = {New York, NY, USA},
	volume       = 20,
	number       = 4,
	doi          = {10.1145/3448128},
	issn         = {1539-9087},
	url          = {https://doi.org/10.1145/3448128},
	note         = {TECS'21},
	issue_date   = {July 2021},
	abstract     = {Many programming languages and programming frameworks focus on parallel and distributed computing. Several frameworks are based on actors, which provide a more disciplined model for concurrency than threads. The interactions between actors, however, if not constrained, admit nondeterminism. As a consequence, actor programs may exhibit unintended behaviors and are less amenable to rigorous testing. We show that nondeterminism can be handled in a number of ways, surveying dataflow dialects, process networks, synchronous-reactive models, and discrete-event models. These existing approaches, however, tend to require centralized control, pose challenges to modular system design, or introduce a single point of failure. We describe “reactors,” a new coordination model that combines ideas from several of these approaches to enable determinism while preserving much of the style of actors. Reactors promote modularity and allow for distributed execution. By using a logical model of time that can be associated with physical time, reactors also provide control over timing. Reactors also expose parallelism that can be exploited on multicore machines and in distributed configurations without compromising determinacy.},
	articleno    = 36,
	numpages     = 27,
	keywords     = {Polyglot, coordination language, concurrency, determinism}
}
@phdthesis{lohstroh2020reactors1,
	title        = {Reactors: A Deterministic Model of Concurrent Computation for Reactive Systems},
	author       = {Lohstroh, Marten},
	year         = 2020,
	month        = {Dec},
	number       = {Ucb/eecs-2020-235},
	url          = {http://www2.eecs.berkeley.edu/Pubs/TechRpts/2020/EECS-2020-235.html},
	note         = {Doctoral Thesis},
	school       = {EECS Department, University of California, Berkeley},
	abstract     = {Actors have become widespread in programming languages and programming frameworks focused on parallel and distributed computing. While actors provide a more disciplined model for concurrency than threads, their interactions, if not constrained, admit nondeterminism. As a consequence, actor programs may exhibit unintended behaviors and are less amenable to rigorous testing. The same problem exists in other dominant concurrency models, such as threads, shared-memory models, publish-subscribe systems, and service-oriented architectures. We propose “reactors,” a new model of concurrent computation that combines synchronous-reactive principles with a sophisticated model of time to enable determinism while preserving much of the style and performance of actors. Reactors promote modularity and allow for distributed execution. The relationship that reactors establish between events across timelines allows for: 1. the construction of programs that react predictably to unpredictable external events; 2. the formulation of deadlines that grant control over timing; and 3. the preservation of a deterministic distributed execution semantics under quantifiable assumptions. We bring the deterministic concurrency and time-based semantics of reactors to the world of mainstream programming languages through Lingua Franca (LF), a polyglot coordination language with support (so far) for C, C++, Python, and TypeScript. In LF, program logic is given in one or more of those target languages, enabling developers to use familiar languages and integrate extensive libraries and legacy code. The main contributions of this work consist of a formalization of reactors, the implementation of an efficient runtime system for the execution of reactors, and the design and implementation of LF.}
}
@inproceedings{lohstroh2020language,
	title        = {A Language for Deterministic Coordination Across Multiple Timelines},
	author       = {Lohstroh, Marten and Menard, Christian and Schulz-Rosengarten, Alexander and Weber, Matthew and Castrillón, Jerónimo and Lee, Edward},
	year         = 2020,
	month        = {09},
	pages        = {1--8},
	doi          = {10.1109/fdl50818.2020.9232939},
	note         = {FDL'20}
}
@misc{menard2019achieving,
	title        = {Achieving Determinism in Adaptive AUTOSAR},
	author       = {Christian Menard and Andres Goens and Marten Lohstroh and Jeronimo Castrillon},
	year         = 2019,
	note         = {DATE'20},
	eprint       = {1912.01367},
	archiveprefix = {arXiv},
	primaryclass = {cs.DC}
}
@inproceedings{lohstroh2019work1,
	title        = {Work-in-Progress: Real-Time Reactors in C},
	author       = {Lohstroh, Marten and Lee, Edward A.},
	year         = 2019,
	booktitle    = {2019 IEEE Real-Time Systems Symposium (RTSS)},
	pages        = {572--575},
	doi          = {10.1109/rtss46320.2019.00067},
	note         = {RTSS'19}
}
@inproceedings{lohstroh2020reactors2,
	title        = {Reactors: A Deterministic Model for Composable Reactive Systems},
	author       = {Lohstroh, Marten and Romeo, {\'I}{\~{n}}igo {\'I}ncer and Goens, Andr{\'e}s and Derler, Patricia and Castrillon, Jeronimo and Lee, Edward A. and Sangiovanni-Vincentelli, Alberto},
	year         = 2020,
	booktitle    = {Cyber Physical Systems. Model-Based Design},
	publisher    = {Springer International Publishing},
	address      = {Cham},
	pages        = {59--85},
	doi          = {10.1007/978-3-030-41131-2_4},
	isbn         = {978-3-030-41131-2},
	note         = {CyPhy'19},
	editor       = {Chamberlain, Roger and Edin Grimheden, Martin and Taha, Walid},
	abstract     = {This paper describes a component-based concurrent model of computation for reactive systems. The components in this model, featuring ports and hierarchy, are called reactors. The model leverages a semantic notion of time, an event scheduler, and a synchronous-reactive style of communication to achieve determinism. Reactors enable a programming model that ensures determinism, unless explicitly abandoned by the programmer. We show how the coordination of reactors can safely and transparently exploit parallelism, both in shared-memory and distributed systems.}
}
@inproceedings{lohstroh2019work2,
	title        = {Work-in-Progress: Programs with Ironclad Timing Guarantees},
	author       = {Lohstroh, Marten and Schoeberl, Martin and Jan, Mathieu and Wang, Edward and Lee, Edward A.},
	year         = 2019,
	booktitle    = {2019 International Conference on Embedded Software (EMSOFT)},
	pages        = {1--2},
	note         = {EMSOFT'19}
}
@inproceedings{lohstroh2019deterministic,
	title        = {Deterministic Actors},
	author       = {Lohstroh, Marten and Lee, Edward A.},
	year         = 2019,
	booktitle    = {2019 Forum for Specification and Design Languages (FDL)},
	pages        = {1--8},
	doi          = {10.1109/fdl.2019.8876922},
	note         = {FDL'19}
}
@inproceedings{lohstroh2019invited,
	title        = {Invited: Actors Revisited for Time-Critical Systems},
	author       = {Lohstroh, Marten and Schoeberl, Martin and Goens, Andrés and Wasicek, Armin and Gill, Christopher and Sirjani, Marjan and Lee, Edward A.},
	year         = 2019,
	booktitle    = {2019 56th ACM/IEEE Design Automation Conference (DAC)},
	pages        = {1--4},
	note         = {DAC'19}
}
