target C {
  timeout: 3 s,
  coordination: decentralized
}

reactor CountPrint {
  input in: int
  output out: int
  state c: int = 0
  timer t(0, 100 ms)

  reaction(t) -> out {=
    lf_set(out, self->c++);
  =}

  reaction(in) {=
    lf_print("***** CountPrint Received: %d at tag (%lld, %u)",
        in->value, lf_time_logical_elapsed(), lf_tag().microstep
    );
  =} tardy {=
    // This should never happen, but it is here to demonstrate the tardy violation handler.
    lf_print_warning("CountPrint: Message is tardy!");
    lf_print("Intended time: %lld", in->intended_tag.time - lf_time_start());
  =}
}

reactor Double {
  input in: int
  output out: int

  reaction(in) -> out {=
    lf_set(out, in->value * 2);
  =}
}

federated reactor {
  c = new CountPrint()
  p = new Double()
  c.out -> p.in
  @absent_after(forever)
  p.out -> c.in
}
